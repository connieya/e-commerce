package com.example.hanghaeplus.repository.product;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeProductRepository implements ProductRepository {

    private final AtomicLong autoGeneratedId= new AtomicLong(0);
    private final List<Product> data = new ArrayList<>();

    @Override
    public List<Product> findAllById(List<Long> ids) {
        return data.stream()
                .filter(product -> ids.contains(product.getId()))
                .collect(Collectors.toList());
    }

    @Override
    public Optional<Product> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }
    @Override
    public List<Product> saveAll(List<Product> products) {
        data.addAll(products);
        return data;
    }
    @Override
    public Product save(Product product) {
        if (product == null || product.getId() == null) {
            Product newProduct = Product
                    .builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(product.getName())
                    .price(product.getPrice())
                    .quantity(product.getQuantity())
                    .build();
            data.add(newProduct);
            return newProduct;
        }else {
            data.removeIf(item -> Objects.equals(item.getId(), product.getId()));
            data.add(product);
            return product;
        }
    }


    @Override
    public List<Product> findAllByPessimisticLock(List<Long> productIds) {
        return null;
    }

    @Override
    public List<Product> findAll() {
        return data;
    }


    @Override
    public List<Product> findAllByPessimisticLock2(List<Long> productIds) {
        return null;
    }

    @Override
    public Optional<Product> findByIdPessimisticLock(Long productId) {
        return Optional.empty();
    }


}
